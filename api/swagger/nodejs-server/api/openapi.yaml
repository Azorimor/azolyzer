openapi: 3.0.0
info:
  title: Azolyzer API
  description: |
    This is the api of the azolyzer discord server analytics tool. See
    [https://github.com/Azorimor/azolyzer](https://github.com/Azorimor/azolyzer).
  termsOfService: http://swagger.io/terms/
  contact:
    name: Azorimor
    email: azorimor@gmail.com
  license:
    name: GNU General Public License v3.0
    url: https://github.com/Azorimor/azolyzer/blob/master/LICENSE
  version: 0.1.0
externalDocs:
  description: Azolyzer Documentation
  url: https://azorimor.github.io/azolyzer-docs/
servers:
- url: https://virtserver.swaggerhub.com/Azorimor/Azolyzer/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://api.azolyzer.net
  description: Public Azolyzer API
security:
- api_key: []
tags:
- name: guild
  description: Get Information about a stored guild.
- name: history
  description: Get history data.
- name: user
  description: Operations about user
  externalDocs:
    description: Find out more about our store
    url: http://swagger.io
paths:
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
      x-swagger-router-controller: User
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
      x-swagger-router-controller: User
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
      x-swagger-router-controller: User
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        avatar:
          type: string
          description: Can be null, if the user does not have an avatar.
          nullable: true
        username:
          type: string
        locale:
          type: string
          description: The locale set by discord.
          nullable: true
        tag:
          type: string
          description: The discord tag.
        guilds:
          type: array
          description: Guilds, the user is in.
          items:
            $ref: '#/components/schemas/Guild'
      example:
        guilds:
        - publicStats: true
          channels: channels
          members: members
          name: name
          verified: true
          icon: icon
          description: description
          id: 6
          region: region
          partnered: true
        - publicStats: true
          channels: channels
          members: members
          name: name
          verified: true
          icon: icon
          description: description
          id: 6
          region: region
          partnered: true
        id: 0
        avatar: avatar
        tag: tag
        locale: locale
        username: username
      xml:
        name: User
    Guild:
      type: object
      properties:
        id:
          type: integer
          format: int64
        publicStats:
          type: boolean
          description: True, if the statistics of this guild are public.
        channels:
          type: string
          description: TODO
        members:
          type: string
          description: TODO
        description:
          type: string
          description: The Guild description.
          nullable: true
        name:
          type: string
        partnered:
          type: boolean
        verified:
          type: boolean
        region:
          type: string
        icon:
          type: string
          nullable: true
      description: A guild is a discord server
      example:
        publicStats: true
        channels: channels
        members: members
        name: name
        verified: true
        icon: icon
        description: description
        id: 6
        region: region
        partnered: true
    Member:
      type: object
      properties:
        id:
          type: integer
          format: int64
        nickname:
          type: string
      description: A user specific to a Guild.
  requestBodies:
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header
